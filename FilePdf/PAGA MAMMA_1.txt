import numpy as np
import struct
from collections import Counter, namedtuple
from decimal import Decimal

EncodedData1 = namedtuple("EncodedData", ["encoded_value", "ranges", "length"])

def run_length_encoding(data):
    """Applica Run-Length Encoding (RLE) a una stringa."""
    print("\n[INFO] Eseguendo Run-Length Encoding (RLE)...")
    encoded = []
    i = 0
    while i < len(data):
        count = 1
        while i + 1 < len(data) and data[i] == data[i + 1]:
            i += 1
            count += 1
        encoded.append((data[i], count))
        print(f"    - Carattere: {data[i]}, Conteggio: {count}")
        i += 1
    return encoded
def run_length_decoding(encoded):
    """Decodifica Run-Length Encoding (RLE)."""
    decoded = []
    i = 0
    while i < len(encoded):
        char = encoded[i]
        count = int(encoded[i + 1])
        decoded.extend([char] * count)
        i += 2
    return "".join(decoded)



def burrows_wheeler_transform(text, block_size=1024):
    """Applica BWT in blocchi per file di grandi dimensioni."""
    text += "$"
    
    if len(text) <= block_size:
        rotations = sorted([text[i:] + text[:i] for i in range(len(text))])
        return "".join(row[-1] for row in rotations)
    
    output = []
    for i in range(0, len(text), block_size):
        block = text[i:i+block_size]
        rotations = sorted([block[j:] + block[:j] for j in range(len(block))])
        output.append("".join(row[-1] for row in rotations))
    
    return "".join(output)    
def inverse_burrows_wheeler(bwt_string):
    """Ricostruisce la stringa originale dalla trasformata di Burrows-Wheeler."""
    table = ["" for _ in bwt_string]
    for _ in range(len(bwt_string)):
        table = sorted([bwt_string[i] + table[i] for i in range(len(bwt_string))])
    for row in table:
        if row.endswith("$"):
            return row[:-1]


def move_to_front_transform(text):
    """Applica Move-To-Front Transform (MTF) su una stringa."""
    print("\n[INFO] Eseguendo Move-To-Front Transform (MTF)...")
    alphabet = sorted(set(text))  # Costruisce la lista ordinata dei caratteri unici
    encoded = []
    print("Alfabeto iniziale",alphabet," basata su " + text)
    for char in text:
        index = alphabet.index(char)
        encoded.append(index)
        alphabet.insert(0, alphabet.pop(index))  # Sposta il carattere all'inizio della lista
        print(f"    - Carattere: {char}, Indice: {index}, Lista aggiornata: {alphabet}")
    return encoded
def move_to_front_decoding(encoded,text):
    """Applica Move-To-Front Decoding (MTF)."""
    # Ricostruire l'alfabeto iniziale basato sui caratteri possibili
    print("testo",text)
    alphabet = sorted(set(text))  # Deve corrispondere a quello della codifica
    print(alphabet)
    decoded = []
    
    for index in encoded:
        symbol = alphabet[index]  # Trova il simbolo in base all'indice
        decoded.append(symbol)  # Aggiungi il simbolo alla sequenza decodificata
        alphabet.pop(index)  # Rimuovi il simbolo dall'alfabeto
        alphabet.insert(0, symbol)  # Sposta il simbolo in cima alla lista
    
    return "".join(decoded)  # Ricostruisce la stringa originale


def jbit_encoding(data):
    """Applica J-bit Encoding (JBE) separando dati e mappa di bit secondo il paper."""
    print("\n[INFO] Eseguendo J-bit Encoding (JBE)...")
    data_I = []  # Byte diversi da zero
    data_II = []  # Mappa di bit
    temp_byte = 0  # Temporary byte per raccogliere bit
    bit_count = 0  # Contatore di bit nel temporary byte
    
    for value in data:
        if value != 0:
            data_I.append(value)
            temp_byte = (temp_byte << 1) | 1  # Aggiungere un '1' a data_II
        else:
            temp_byte = (temp_byte << 1) | 0  # Aggiungere uno '0'
        bit_count += 1
        print(f"    - Valore: {value}, Temporary Byte: {bin(temp_byte)}, Bit Count: {bit_count}")
        
        if bit_count == 8:  # Quando il temporary byte è pieno, salvarlo in data_II
            print("temp",temp_byte)
            data_II.append(temp_byte)
            temp_byte = 0
            bit_count = 0
    
    if bit_count > 0:  # Se rimangono bit non scritti, riempiamo fino a 8 bit
        temp_byte <<= (8 - bit_count)  # Aggiungiamo zeri nei bit finali
        data_II.append(temp_byte)
    
    print("    - Dati I (Valori utili):", data_I)
    print("    - Dati II (Mappa bit in binario):", [bin(x) for x in data_II])
    print("    - Dati II (Mappa bit in binario):", " ".join(f"{bin(x)[2:].zfill(8)}" for x in data_II))

    return data_I, data_II






    """Applica Run-Length Encoding (RLE) a una stringa."""
    print("\n[INFO] Eseguendo Run-Length Encoding (RLE)...")
    encoded = []
    i = 0
    while i < len(data):
        count = 1
        while i + 1 < len(data) and data[i] == data[i + 1]:
            i += 1
            count += 1
        encoded.append((data[i], count))
        print(f"    - Carattere: {data[i]}, Conteggio: {count}")
        i += 1
    return encoded

    """Applica la trasformazione di Burrows-Wheeler (BWT)."""
    print("\n[INFO] Eseguendo Burrows-Wheeler Transform (BWT)...")
    text += "$"  # Aggiungere simbolo di fine stringa
    rotations = sorted([text[i:] + text[:i] for i in range(len(text))])
    for i, row in enumerate(rotations):
        print(f"    - Rotazione {i}: {row}")
    bwt = "".join(row[-1] for row in rotations)
    print("    - Risultato BWT:", bwt)
    return bwt
def jbit_decoding(data_I, data_II, original_length):
    """Applica la decodifica J-bit Encoding (JBE) per ripristinare l'input originale."""
    
    decoded_data = []
    bit_index = 0  # Indice per leggere `Data I`
    bit_count = 0  # Numero di bit letti
    
    # Scansioniamo i byte di `Data II` (mappa bit)
    for temp_byte in data_II:
        for i in range(7, -1, -1):  # Leggiamo ogni bit da sinistra a destra
            if bit_count >= original_length:  # Se abbiamo ricostruito l'input originale, fermiamo il processo
                return decoded_data
            
            if (temp_byte >> i) & 1:  # Se il bit è `1`, prendiamo un valore da `Data I`
                if bit_index < len(data_I):  # Controllo per evitare errori di accesso
                    decoded_data.append(data_I[bit_index])
                    bit_index += 1
            else:  # Se il bit è `0`, scriviamo uno zero byte
                decoded_data.append(0)
            
            bit_count += 1  # Aggiorniamo il conteggio dei bit usati

    return decoded_data


def arithmetic_encode(symbols):
    # Calcola la frequenza dei simboli
    freq = Counter(symbols)
    total = sum(freq.values())
    
    # Calcola gli intervalli cumulativi
    low = Decimal(0)
    high = Decimal(1)
    ranges = {}
    current_low = Decimal(0)
    
    for symbol, count in sorted(freq.items()):
        probability = Decimal(count) / Decimal(total)
        ranges[symbol] = (current_low, current_low + probability)
        current_low += probability
    
    # Codifica aritmetica
    for symbol in symbols:
        low_range, high_range = ranges[symbol]
        range_width = high - low
        high = low + range_width * high_range
        low = low + range_width * low_range
    
    # Il valore codificato può essere qualsiasi valore in (low, high)
    return (low + high) / 2, ranges, len(symbols)
def arithmetic_decode(encoded_value, ranges, length):
    decoded_symbols = []
    low = Decimal(0)
    high = Decimal(1)
    # 🔥 Converti encoded_value in Decimal
    encoded_value = Decimal(encoded_value)
    for _ in range(length):
        value_range = high - low
        target_value = (encoded_value - low) / value_range
        
        for symbol, (range_low, range_high) in ranges.items():
            range_low = Decimal(range_low)  # 🔄 Converti in Decimal
            range_high = Decimal(range_high)  # 🔄 Converti in Decimal
            if range_low <= target_value < range_high:
                decoded_symbols.append(symbol)
                high = low + value_range * range_high
                low = low + value_range * range_low
                break
    
    return decoded_symbols



def load_compressed_file(filename):
    """Carica i dati compressi da un file binario e ricostruisce gli oggetti EncodedData, inclusa la lettura dell'alfabeto iniziale."""
    with open(filename, "rb") as f:
        original_length = struct.unpack("I", f.read(4))[0]  # Legge lunghezza originale
        
        # Legge l'alfabeto iniziale
        alphabet_size = struct.unpack("I", f.read(4))[0]  # Numero di caratteri nell'alfabeto
        alphabet = "".join(chr(struct.unpack("B", f.read(1))[0]) for _ in range(alphabet_size))

        # Legge i dati compressi di Data I
        encoded_value_I = struct.unpack("d", f.read(8))[0]  # Valore codificato Data I
        length_I = struct.unpack("I", f.read(4))[0]  # Lunghezza Data I
        num_symbols_I = struct.unpack("I", f.read(4))[0]  # Numero di simboli Data I
        ranges_I = {}
        for _ in range(num_symbols_I):
            symbol = struct.unpack("B", f.read(1))[0]  # Legge simbolo
            low = struct.unpack("d", f.read(8))[0]  # Legge limite inferiore
            high = struct.unpack("d", f.read(8))[0]  # Legge limite superiore
            ranges_I[symbol] = (low, high)

        encoded_data_I = EncodedData1(encoded_value_I, ranges_I, length_I)
        
        # Legge i dati compressi di Data II
        encoded_value_II = struct.unpack("d", f.read(8))[0]  # Valore codificato Data II
        length_II = struct.unpack("I", f.read(4))[0]  # Lunghezza Data II
        num_symbols_II = struct.unpack("I", f.read(4))[0]  # Numero di simboli Data II
        ranges_II = {}
        for _ in range(num_symbols_II):
            symbol = struct.unpack("B", f.read(1))[0]  # Legge simbolo
            low = struct.unpack("d", f.read(8))[0]  # Legge limite inferiore
            high = struct.unpack("d", f.read(8))[0]  # Legge limite superiore
            ranges_II[symbol] = (low, high)

        encoded_data_II = EncodedData1(encoded_value_II, ranges_II, length_II)

    return original_length, encoded_data_I, encoded_data_II, alphabet


def compress_file(input_text, output_file):
    """Esegue la compressione completa e salva il file."""
    print("[INFO] Avvio compressione...")

    # Step 1: Run-Length Encoding (RLE)
    rle_output = run_length_encoding(input_text)
    rle_string = "".join(f"{char}{str(count)}" for char, count in rle_output)

    # Step 2: Burrows-Wheeler Transform (BWT)
    bwt_output = burrows_wheeler_transform(rle_string)

    # ✅ Creiamo l'alfabeto prima della MTF
    alphabet = sorted(set(bwt_output))
    # Step 3: Move-To-Front Transform (MTF)
    mtf_output = move_to_front_transform(bwt_output)

    # Step 4: J-bit Encoding (JBE)
    data_I, data_II = jbit_encoding(mtf_output)

    # Step 5: Arithmetic Encoding (ARI)
    
    encoded_value,ranges, length = arithmetic_encode(data_I)
    encoded_value1,ranges1, length1 = arithmetic_encode(data_II)
    encoded_data1 = EncodedData1(encoded_value,ranges,length)
    encoded_data2 = EncodedData1(encoded_value1,ranges1,length1)
    #print("gay",encoded_data2,encoded_data1)
    # Definizione della struttura dati per rappresentare il dato codificato
    # Step 6: Salva nel file compresso
    save_compressed_file(output_file, len(input_text), encoded_data1, encoded_data2, alphabet)

    print("[INFO] Compressione completata. File salvato come", output_file)

def save_compressed_file(filename, original_length, encoded_data_I, encoded_data_II, alphabet):
    """Salva i dati compressi in un file binario, incluso l'alfabeto iniziale per la decodifica MTF."""
    with open(filename, "wb") as f:
        f.write(struct.pack("I", original_length))  # Lunghezza originale
        
        # Scrive l'alfabeto iniziale per la decodifica MTF
        f.write(struct.pack("I", len(alphabet)))  # Numero di caratteri nell'alfabeto
        for char in alphabet:
            f.write(struct.pack("B", ord(char)))  # Salva ogni carattere come byte
        
        # Scrive i dati compressi di Data I
        f.write(struct.pack("d", encoded_data_I.encoded_value))  # Valore ARI codificato Data I
        f.write(struct.pack("I", encoded_data_I.length))  # Lunghezza di Data I
        f.write(struct.pack("I", len(encoded_data_I.ranges)))  # Numero di simboli in Data I
        for symbol, (low, high) in encoded_data_I.ranges.items():
            f.write(struct.pack("B", int(symbol)))
            f.write(struct.pack("d", float(low)))
            f.write(struct.pack("d", float(high)))
        
        # Scrive i dati compressi di Data II
        f.write(struct.pack("d", encoded_data_II.encoded_value))  # Valore ARI codificato Data II
        f.write(struct.pack("I", encoded_data_II.length))  # Lunghezza di Data II
        f.write(struct.pack("I", len(encoded_data_II.ranges)))  # Numero di simboli in Data II
        for symbol, (low, high) in encoded_data_II.ranges.items():
            f.write(struct.pack("B", int(symbol)))
            f.write(struct.pack("d", float(low)))
            f.write(struct.pack("d", float(high)))

def decompress_file(input_file):
    """Esegue la decompressione dal file salvato e restituisce il testo originale."""
    print("[INFO] Avvio decompressione...")

    # Step 1: Carica il file compresso
    original_length, encoded_I, encoded_II,alphabet = load_compressed_file(input_file)
    print("dio",encoded_I.encoded_value, encoded_I.ranges,encoded_I.length)
    # Step 2: Decodifica Arithmetic Encoding
    decoded_I = arithmetic_decode(encoded_I.encoded_value, encoded_I.ranges,encoded_I.length)
    decoded_II = arithmetic_decode(encoded_II.encoded_value, encoded_II.ranges,encoded_II.length)
    print("qui",decoded_I,decoded_II)
    # Step 3: J-bit Decoding
    decoded_mtf = jbit_decoding(decoded_I, decoded_II, encoded_I.length)
    print("Dio",decoded_mtf)
    # Step 4: Move-To-Front Decoding
    decoded_bwt = move_to_front_decoding(decoded_mtf,alphabet)
    print("Dio",decoded_bwt)
    # Step 5: Inverse Burrows-Wheeler Transform
    rle_string = inverse_burrows_wheeler(decoded_bwt)

    # Step 6: Run-Length Decoding
    original_text = run_length_decoding(rle_string)

    print("[INFO] Decompressione completata.")
    return original_text or "gay"



# ============================
# 🚀 ESEMPIO DI UTILIZZO
# ============================
if __name__ == "__main__":
    input_text = "AADSS"

    # 1️⃣ RLE
    rle_output = run_length_encoding(input_text)
    if rle_output:
        rle_string = "".join(f"{char}{str(count)}" for char, count in rle_output)
    else:
        rle_string = ""
    print("\n[RISULTATO] RLE Output:", rle_string)

    print(run_length_decoding(rle_string))

    # 2️⃣ BWT
    bwt_output = burrows_wheeler_transform(rle_string)
    print("\n[RISULTATO] BWT Output:", bwt_output)
    print("reverse",inverse_burrows_wheeler(bwt_output))
    # 3️⃣ MTF
    mtf_output = move_to_front_transform(bwt_output)
    print("\n[RISULTATO] MTF Output:", mtf_output)
    print("Reverse",move_to_front_decoding(mtf_output, bwt_output))
    # 4️⃣ JBE
    jbe_data_I, jbe_data_II = jbit_encoding(mtf_output)
    print("\n[RISULTATO] JBE Data I:", jbe_data_I)
    print("[RISULTATO] JBE Data II (bit map):", jbe_data_II)
    print(len(mtf_output))

    print("QUI",jbit_decoding(jbe_data_I,jbe_data_II,len(mtf_output)))

    # 5️⃣ ARI Encoding Data I
    encoded_value,ranges, length = arithmetic_encode(jbe_data_I)
    print("\n[RISULTATO] ARI Encoded Value:", encoded_value)
    
    # 5️⃣ ARI Decoding
    # Decodifica
    decoded_output = arithmetic_decode(encoded_value, ranges, length)
    print("\n[RISULTATO] ARI Decoded Output:", decoded_output)

    # 5️⃣ ARI Encoding Data II
    #encoded_value = arithmetic_encoding(jbe_data_II)
    #print("\n[RISULTATO] ARI Encoded Value:", encoded_value)
    """

    # 5️⃣ ARI Decoding
    freq = Counter(jbe_data_II)
    decoded_output = arithmetic_decoding(encoded_value, len(jbe_data_II), freq)
    print("\n[RISULTATO] ARI Decoded Output:", decoded_output)
    """
    
    print("\n\n")
    
    
    compressed_file = "compressed.bin"
    compress_file(input_text,compressed_file)

    decompressed_text = decompress_file(compressed_file)

    # Verifica
    print("\n[RISULTATO] Testo originale:", input_text)
    print("[RISULTATO] Testo decompresso:", decompressed_text)

    assert input_text == decompressed_text, "Errore! Il testo decompresso non corrisponde all'originale!"
    print("[✅] Compressione e decompressione riuscite con successo!")